//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace WebAPI.Reports {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("AllTrendDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class AllTrendDataSet : global::System.Data.DataSet {
        
        private ATTrendDataTable tableATTrend;
        
        private ATProjectDataTable tableATProject;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public AllTrendDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected AllTrendDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["ATTrend"] != null)) {
                    base.Tables.Add(new ATTrendDataTable(ds.Tables["ATTrend"]));
                }
                if ((ds.Tables["ATProject"] != null)) {
                    base.Tables.Add(new ATProjectDataTable(ds.Tables["ATProject"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ATTrendDataTable ATTrend {
            get {
                return this.tableATTrend;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ATProjectDataTable ATProject {
            get {
                return this.tableATProject;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public override global::System.Data.DataSet Clone() {
            AllTrendDataSet cln = ((AllTrendDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ATTrend"] != null)) {
                    base.Tables.Add(new ATTrendDataTable(ds.Tables["ATTrend"]));
                }
                if ((ds.Tables["ATProject"] != null)) {
                    base.Tables.Add(new ATProjectDataTable(ds.Tables["ATProject"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars(bool initTable) {
            this.tableATTrend = ((ATTrendDataTable)(base.Tables["ATTrend"]));
            if ((initTable == true)) {
                if ((this.tableATTrend != null)) {
                    this.tableATTrend.InitVars();
                }
            }
            this.tableATProject = ((ATProjectDataTable)(base.Tables["ATProject"]));
            if ((initTable == true)) {
                if ((this.tableATProject != null)) {
                    this.tableATProject.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitClass() {
            this.DataSetName = "AllTrendDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/AllTrendDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableATTrend = new ATTrendDataTable();
            base.Tables.Add(this.tableATTrend);
            this.tableATProject = new ATProjectDataTable();
            base.Tables.Add(this.tableATProject);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeATTrend() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeATProject() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            AllTrendDataSet ds = new AllTrendDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void ATTrendRowChangeEventHandler(object sender, ATTrendRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void ATProjectRowChangeEventHandler(object sender, ATProjectRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ATTrendDataTable : global::System.Data.TypedTableBase<ATTrendRow> {
            
            private global::System.Data.DataColumn columnCategoryID;
            
            private global::System.Data.DataColumn columnTrendNumber;
            
            private global::System.Data.DataColumn columnSubCategoryDescription;
            
            private global::System.Data.DataColumn columnProjectID;
            
            private global::System.Data.DataColumn columnSubCategoryID;
            
            private global::System.Data.DataColumn columntotal;
            
            private global::System.Data.DataColumn columnTrendStatus;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ATTrendDataTable() {
                this.TableName = "ATTrend";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ATTrendDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected ATTrendDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CategoryIDColumn {
                get {
                    return this.columnCategoryID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TrendNumberColumn {
                get {
                    return this.columnTrendNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SubCategoryDescriptionColumn {
                get {
                    return this.columnSubCategoryDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ProjectIDColumn {
                get {
                    return this.columnProjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SubCategoryIDColumn {
                get {
                    return this.columnSubCategoryID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn totalColumn {
                get {
                    return this.columntotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TrendStatusColumn {
                get {
                    return this.columnTrendStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ATTrendRow this[int index] {
                get {
                    return ((ATTrendRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ATTrendRowChangeEventHandler ATTrendRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ATTrendRowChangeEventHandler ATTrendRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ATTrendRowChangeEventHandler ATTrendRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ATTrendRowChangeEventHandler ATTrendRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddATTrendRow(ATTrendRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ATTrendRow AddATTrendRow(string CategoryID, string TrendNumber, string SubCategoryDescription, long ProjectID, string SubCategoryID, double total, string TrendStatus) {
                ATTrendRow rowATTrendRow = ((ATTrendRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CategoryID,
                        TrendNumber,
                        SubCategoryDescription,
                        ProjectID,
                        SubCategoryID,
                        total,
                        TrendStatus};
                rowATTrendRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowATTrendRow);
                return rowATTrendRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ATTrendDataTable cln = ((ATTrendDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ATTrendDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnCategoryID = base.Columns["CategoryID"];
                this.columnTrendNumber = base.Columns["TrendNumber"];
                this.columnSubCategoryDescription = base.Columns["SubCategoryDescription"];
                this.columnProjectID = base.Columns["ProjectID"];
                this.columnSubCategoryID = base.Columns["SubCategoryID"];
                this.columntotal = base.Columns["total"];
                this.columnTrendStatus = base.Columns["TrendStatus"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnCategoryID = new global::System.Data.DataColumn("CategoryID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategoryID);
                this.columnTrendNumber = new global::System.Data.DataColumn("TrendNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTrendNumber);
                this.columnSubCategoryDescription = new global::System.Data.DataColumn("SubCategoryDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubCategoryDescription);
                this.columnProjectID = new global::System.Data.DataColumn("ProjectID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                this.columnSubCategoryID = new global::System.Data.DataColumn("SubCategoryID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubCategoryID);
                this.columntotal = new global::System.Data.DataColumn("total", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntotal);
                this.columnTrendStatus = new global::System.Data.DataColumn("TrendStatus", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTrendStatus);
                this.columnCategoryID.AllowDBNull = false;
                this.columnTrendNumber.AllowDBNull = false;
                this.columnProjectID.AllowDBNull = false;
                this.columnSubCategoryID.AllowDBNull = false;
                this.columntotal.ReadOnly = true;
                this.columnTrendStatus.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ATTrendRow NewATTrendRow() {
                return ((ATTrendRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ATTrendRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ATTrendRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ATTrendRowChanged != null)) {
                    this.ATTrendRowChanged(this, new ATTrendRowChangeEvent(((ATTrendRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ATTrendRowChanging != null)) {
                    this.ATTrendRowChanging(this, new ATTrendRowChangeEvent(((ATTrendRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ATTrendRowDeleted != null)) {
                    this.ATTrendRowDeleted(this, new ATTrendRowChangeEvent(((ATTrendRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ATTrendRowDeleting != null)) {
                    this.ATTrendRowDeleting(this, new ATTrendRowChangeEvent(((ATTrendRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveATTrendRow(ATTrendRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                AllTrendDataSet ds = new AllTrendDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ATTrendDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ATProjectDataTable : global::System.Data.TypedTableBase<ATProjectRow> {
            
            private global::System.Data.DataColumn columnProjectID;
            
            private global::System.Data.DataColumn columnProjectName;
            
            private global::System.Data.DataColumn columnProgramID;
            
            private global::System.Data.DataColumn columnProgramElementID;
            
            private global::System.Data.DataColumn columnProjectManager;
            
            private global::System.Data.DataColumn columnProjectSponsor;
            
            private global::System.Data.DataColumn columnApprovedTrendNumber;
            
            private global::System.Data.DataColumn columnCurrentCost;
            
            private global::System.Data.DataColumn columnForecastCost;
            
            private global::System.Data.DataColumn columnCurrentStartDate;
            
            private global::System.Data.DataColumn columnCurrentEndDate;
            
            private global::System.Data.DataColumn columnForecastStartDate;
            
            private global::System.Data.DataColumn columnForecastEndDate;
            
            private global::System.Data.DataColumn columnLatLong;
            
            private global::System.Data.DataColumn columnDirector;
            
            private global::System.Data.DataColumn columnScheduler;
            
            private global::System.Data.DataColumn columnExecSteeringComm;
            
            private global::System.Data.DataColumn columnVicePresident;
            
            private global::System.Data.DataColumn columnFinancialAnalyst;
            
            private global::System.Data.DataColumn columnCapitalProjectAssistant;
            
            private global::System.Data.DataColumn columnOrganizationID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ATProjectDataTable() {
                this.TableName = "ATProject";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ATProjectDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected ATProjectDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ProjectIDColumn {
                get {
                    return this.columnProjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ProjectNameColumn {
                get {
                    return this.columnProjectName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ProgramIDColumn {
                get {
                    return this.columnProgramID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ProgramElementIDColumn {
                get {
                    return this.columnProgramElementID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ProjectManagerColumn {
                get {
                    return this.columnProjectManager;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ProjectSponsorColumn {
                get {
                    return this.columnProjectSponsor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ApprovedTrendNumberColumn {
                get {
                    return this.columnApprovedTrendNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CurrentCostColumn {
                get {
                    return this.columnCurrentCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ForecastCostColumn {
                get {
                    return this.columnForecastCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CurrentStartDateColumn {
                get {
                    return this.columnCurrentStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CurrentEndDateColumn {
                get {
                    return this.columnCurrentEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ForecastStartDateColumn {
                get {
                    return this.columnForecastStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ForecastEndDateColumn {
                get {
                    return this.columnForecastEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LatLongColumn {
                get {
                    return this.columnLatLong;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DirectorColumn {
                get {
                    return this.columnDirector;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SchedulerColumn {
                get {
                    return this.columnScheduler;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ExecSteeringCommColumn {
                get {
                    return this.columnExecSteeringComm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn VicePresidentColumn {
                get {
                    return this.columnVicePresident;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn FinancialAnalystColumn {
                get {
                    return this.columnFinancialAnalyst;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CapitalProjectAssistantColumn {
                get {
                    return this.columnCapitalProjectAssistant;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn OrganizationIDColumn {
                get {
                    return this.columnOrganizationID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ATProjectRow this[int index] {
                get {
                    return ((ATProjectRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ATProjectRowChangeEventHandler ATProjectRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ATProjectRowChangeEventHandler ATProjectRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ATProjectRowChangeEventHandler ATProjectRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ATProjectRowChangeEventHandler ATProjectRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddATProjectRow(ATProjectRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ATProjectRow AddATProjectRow(
                        string ProjectName, 
                        long ProgramID, 
                        long ProgramElementID, 
                        string ProjectManager, 
                        string ProjectSponsor, 
                        string ApprovedTrendNumber, 
                        string CurrentCost, 
                        string ForecastCost, 
                        System.DateTime CurrentStartDate, 
                        System.DateTime CurrentEndDate, 
                        System.DateTime ForecastStartDate, 
                        System.DateTime ForecastEndDate, 
                        string LatLong, 
                        string Director, 
                        string Scheduler, 
                        string ExecSteeringComm, 
                        string VicePresident, 
                        string FinancialAnalyst, 
                        string CapitalProjectAssistant, 
                        string OrganizationID) {
                ATProjectRow rowATProjectRow = ((ATProjectRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ProjectName,
                        ProgramID,
                        ProgramElementID,
                        ProjectManager,
                        ProjectSponsor,
                        ApprovedTrendNumber,
                        CurrentCost,
                        ForecastCost,
                        CurrentStartDate,
                        CurrentEndDate,
                        ForecastStartDate,
                        ForecastEndDate,
                        LatLong,
                        Director,
                        Scheduler,
                        ExecSteeringComm,
                        VicePresident,
                        FinancialAnalyst,
                        CapitalProjectAssistant,
                        OrganizationID};
                rowATProjectRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowATProjectRow);
                return rowATProjectRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ATProjectRow FindByProjectID(long ProjectID) {
                return ((ATProjectRow)(this.Rows.Find(new object[] {
                            ProjectID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ATProjectDataTable cln = ((ATProjectDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ATProjectDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnProjectID = base.Columns["ProjectID"];
                this.columnProjectName = base.Columns["ProjectName"];
                this.columnProgramID = base.Columns["ProgramID"];
                this.columnProgramElementID = base.Columns["ProgramElementID"];
                this.columnProjectManager = base.Columns["ProjectManager"];
                this.columnProjectSponsor = base.Columns["ProjectSponsor"];
                this.columnApprovedTrendNumber = base.Columns["ApprovedTrendNumber"];
                this.columnCurrentCost = base.Columns["CurrentCost"];
                this.columnForecastCost = base.Columns["ForecastCost"];
                this.columnCurrentStartDate = base.Columns["CurrentStartDate"];
                this.columnCurrentEndDate = base.Columns["CurrentEndDate"];
                this.columnForecastStartDate = base.Columns["ForecastStartDate"];
                this.columnForecastEndDate = base.Columns["ForecastEndDate"];
                this.columnLatLong = base.Columns["LatLong"];
                this.columnDirector = base.Columns["Director"];
                this.columnScheduler = base.Columns["Scheduler"];
                this.columnExecSteeringComm = base.Columns["ExecSteeringComm"];
                this.columnVicePresident = base.Columns["VicePresident"];
                this.columnFinancialAnalyst = base.Columns["FinancialAnalyst"];
                this.columnCapitalProjectAssistant = base.Columns["CapitalProjectAssistant"];
                this.columnOrganizationID = base.Columns["OrganizationID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnProjectID = new global::System.Data.DataColumn("ProjectID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                this.columnProjectName = new global::System.Data.DataColumn("ProjectName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectName);
                this.columnProgramID = new global::System.Data.DataColumn("ProgramID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProgramID);
                this.columnProgramElementID = new global::System.Data.DataColumn("ProgramElementID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProgramElementID);
                this.columnProjectManager = new global::System.Data.DataColumn("ProjectManager", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectManager);
                this.columnProjectSponsor = new global::System.Data.DataColumn("ProjectSponsor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectSponsor);
                this.columnApprovedTrendNumber = new global::System.Data.DataColumn("ApprovedTrendNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnApprovedTrendNumber);
                this.columnCurrentCost = new global::System.Data.DataColumn("CurrentCost", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrentCost);
                this.columnForecastCost = new global::System.Data.DataColumn("ForecastCost", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnForecastCost);
                this.columnCurrentStartDate = new global::System.Data.DataColumn("CurrentStartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrentStartDate);
                this.columnCurrentEndDate = new global::System.Data.DataColumn("CurrentEndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrentEndDate);
                this.columnForecastStartDate = new global::System.Data.DataColumn("ForecastStartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnForecastStartDate);
                this.columnForecastEndDate = new global::System.Data.DataColumn("ForecastEndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnForecastEndDate);
                this.columnLatLong = new global::System.Data.DataColumn("LatLong", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLatLong);
                this.columnDirector = new global::System.Data.DataColumn("Director", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDirector);
                this.columnScheduler = new global::System.Data.DataColumn("Scheduler", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScheduler);
                this.columnExecSteeringComm = new global::System.Data.DataColumn("ExecSteeringComm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExecSteeringComm);
                this.columnVicePresident = new global::System.Data.DataColumn("VicePresident", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVicePresident);
                this.columnFinancialAnalyst = new global::System.Data.DataColumn("FinancialAnalyst", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFinancialAnalyst);
                this.columnCapitalProjectAssistant = new global::System.Data.DataColumn("CapitalProjectAssistant", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCapitalProjectAssistant);
                this.columnOrganizationID = new global::System.Data.DataColumn("OrganizationID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOrganizationID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnProjectID}, true));
                this.columnProjectID.AutoIncrement = true;
                this.columnProjectID.AutoIncrementSeed = -1;
                this.columnProjectID.AutoIncrementStep = -1;
                this.columnProjectID.AllowDBNull = false;
                this.columnProjectID.Unique = true;
                this.columnProgramID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ATProjectRow NewATProjectRow() {
                return ((ATProjectRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ATProjectRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ATProjectRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ATProjectRowChanged != null)) {
                    this.ATProjectRowChanged(this, new ATProjectRowChangeEvent(((ATProjectRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ATProjectRowChanging != null)) {
                    this.ATProjectRowChanging(this, new ATProjectRowChangeEvent(((ATProjectRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ATProjectRowDeleted != null)) {
                    this.ATProjectRowDeleted(this, new ATProjectRowChangeEvent(((ATProjectRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ATProjectRowDeleting != null)) {
                    this.ATProjectRowDeleting(this, new ATProjectRowChangeEvent(((ATProjectRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveATProjectRow(ATProjectRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                AllTrendDataSet ds = new AllTrendDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ATProjectDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ATTrendRow : global::System.Data.DataRow {
            
            private ATTrendDataTable tableATTrend;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ATTrendRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableATTrend = ((ATTrendDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CategoryID {
                get {
                    return ((string)(this[this.tableATTrend.CategoryIDColumn]));
                }
                set {
                    this[this.tableATTrend.CategoryIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TrendNumber {
                get {
                    return ((string)(this[this.tableATTrend.TrendNumberColumn]));
                }
                set {
                    this[this.tableATTrend.TrendNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string SubCategoryDescription {
                get {
                    try {
                        return ((string)(this[this.tableATTrend.SubCategoryDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubCategoryDescription\' in table \'ATTrend\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableATTrend.SubCategoryDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long ProjectID {
                get {
                    return ((long)(this[this.tableATTrend.ProjectIDColumn]));
                }
                set {
                    this[this.tableATTrend.ProjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string SubCategoryID {
                get {
                    return ((string)(this[this.tableATTrend.SubCategoryIDColumn]));
                }
                set {
                    this[this.tableATTrend.SubCategoryIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double total {
                get {
                    try {
                        return ((double)(this[this.tableATTrend.totalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'total\' in table \'ATTrend\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableATTrend.totalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TrendStatus {
                get {
                    try {
                        return ((string)(this[this.tableATTrend.TrendStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TrendStatus\' in table \'ATTrend\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableATTrend.TrendStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSubCategoryDescriptionNull() {
                return this.IsNull(this.tableATTrend.SubCategoryDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSubCategoryDescriptionNull() {
                this[this.tableATTrend.SubCategoryDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IstotalNull() {
                return this.IsNull(this.tableATTrend.totalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SettotalNull() {
                this[this.tableATTrend.totalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTrendStatusNull() {
                return this.IsNull(this.tableATTrend.TrendStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTrendStatusNull() {
                this[this.tableATTrend.TrendStatusColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ATProjectRow : global::System.Data.DataRow {
            
            private ATProjectDataTable tableATProject;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ATProjectRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableATProject = ((ATProjectDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long ProjectID {
                get {
                    return ((long)(this[this.tableATProject.ProjectIDColumn]));
                }
                set {
                    this[this.tableATProject.ProjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ProjectName {
                get {
                    try {
                        return ((string)(this[this.tableATProject.ProjectNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectName\' in table \'ATProject\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableATProject.ProjectNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long ProgramID {
                get {
                    return ((long)(this[this.tableATProject.ProgramIDColumn]));
                }
                set {
                    this[this.tableATProject.ProgramIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long ProgramElementID {
                get {
                    try {
                        return ((long)(this[this.tableATProject.ProgramElementIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProgramElementID\' in table \'ATProject\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableATProject.ProgramElementIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ProjectManager {
                get {
                    try {
                        return ((string)(this[this.tableATProject.ProjectManagerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectManager\' in table \'ATProject\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableATProject.ProjectManagerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ProjectSponsor {
                get {
                    try {
                        return ((string)(this[this.tableATProject.ProjectSponsorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectSponsor\' in table \'ATProject\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableATProject.ProjectSponsorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ApprovedTrendNumber {
                get {
                    try {
                        return ((string)(this[this.tableATProject.ApprovedTrendNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ApprovedTrendNumber\' in table \'ATProject\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableATProject.ApprovedTrendNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CurrentCost {
                get {
                    try {
                        return ((string)(this[this.tableATProject.CurrentCostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CurrentCost\' in table \'ATProject\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableATProject.CurrentCostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ForecastCost {
                get {
                    try {
                        return ((string)(this[this.tableATProject.ForecastCostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ForecastCost\' in table \'ATProject\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableATProject.ForecastCostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime CurrentStartDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableATProject.CurrentStartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CurrentStartDate\' in table \'ATProject\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableATProject.CurrentStartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime CurrentEndDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableATProject.CurrentEndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CurrentEndDate\' in table \'ATProject\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableATProject.CurrentEndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime ForecastStartDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableATProject.ForecastStartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ForecastStartDate\' in table \'ATProject\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableATProject.ForecastStartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime ForecastEndDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableATProject.ForecastEndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ForecastEndDate\' in table \'ATProject\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableATProject.ForecastEndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string LatLong {
                get {
                    try {
                        return ((string)(this[this.tableATProject.LatLongColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LatLong\' in table \'ATProject\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableATProject.LatLongColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Director {
                get {
                    try {
                        return ((string)(this[this.tableATProject.DirectorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Director\' in table \'ATProject\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableATProject.DirectorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Scheduler {
                get {
                    try {
                        return ((string)(this[this.tableATProject.SchedulerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Scheduler\' in table \'ATProject\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableATProject.SchedulerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ExecSteeringComm {
                get {
                    try {
                        return ((string)(this[this.tableATProject.ExecSteeringCommColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExecSteeringComm\' in table \'ATProject\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableATProject.ExecSteeringCommColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string VicePresident {
                get {
                    try {
                        return ((string)(this[this.tableATProject.VicePresidentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VicePresident\' in table \'ATProject\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableATProject.VicePresidentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string FinancialAnalyst {
                get {
                    try {
                        return ((string)(this[this.tableATProject.FinancialAnalystColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FinancialAnalyst\' in table \'ATProject\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableATProject.FinancialAnalystColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CapitalProjectAssistant {
                get {
                    try {
                        return ((string)(this[this.tableATProject.CapitalProjectAssistantColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CapitalProjectAssistant\' in table \'ATProject\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableATProject.CapitalProjectAssistantColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string OrganizationID {
                get {
                    try {
                        return ((string)(this[this.tableATProject.OrganizationIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OrganizationID\' in table \'ATProject\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableATProject.OrganizationIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsProjectNameNull() {
                return this.IsNull(this.tableATProject.ProjectNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetProjectNameNull() {
                this[this.tableATProject.ProjectNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsProgramElementIDNull() {
                return this.IsNull(this.tableATProject.ProgramElementIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetProgramElementIDNull() {
                this[this.tableATProject.ProgramElementIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsProjectManagerNull() {
                return this.IsNull(this.tableATProject.ProjectManagerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetProjectManagerNull() {
                this[this.tableATProject.ProjectManagerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsProjectSponsorNull() {
                return this.IsNull(this.tableATProject.ProjectSponsorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetProjectSponsorNull() {
                this[this.tableATProject.ProjectSponsorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsApprovedTrendNumberNull() {
                return this.IsNull(this.tableATProject.ApprovedTrendNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetApprovedTrendNumberNull() {
                this[this.tableATProject.ApprovedTrendNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCurrentCostNull() {
                return this.IsNull(this.tableATProject.CurrentCostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCurrentCostNull() {
                this[this.tableATProject.CurrentCostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsForecastCostNull() {
                return this.IsNull(this.tableATProject.ForecastCostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetForecastCostNull() {
                this[this.tableATProject.ForecastCostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCurrentStartDateNull() {
                return this.IsNull(this.tableATProject.CurrentStartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCurrentStartDateNull() {
                this[this.tableATProject.CurrentStartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCurrentEndDateNull() {
                return this.IsNull(this.tableATProject.CurrentEndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCurrentEndDateNull() {
                this[this.tableATProject.CurrentEndDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsForecastStartDateNull() {
                return this.IsNull(this.tableATProject.ForecastStartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetForecastStartDateNull() {
                this[this.tableATProject.ForecastStartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsForecastEndDateNull() {
                return this.IsNull(this.tableATProject.ForecastEndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetForecastEndDateNull() {
                this[this.tableATProject.ForecastEndDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLatLongNull() {
                return this.IsNull(this.tableATProject.LatLongColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLatLongNull() {
                this[this.tableATProject.LatLongColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDirectorNull() {
                return this.IsNull(this.tableATProject.DirectorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDirectorNull() {
                this[this.tableATProject.DirectorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSchedulerNull() {
                return this.IsNull(this.tableATProject.SchedulerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSchedulerNull() {
                this[this.tableATProject.SchedulerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsExecSteeringCommNull() {
                return this.IsNull(this.tableATProject.ExecSteeringCommColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetExecSteeringCommNull() {
                this[this.tableATProject.ExecSteeringCommColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsVicePresidentNull() {
                return this.IsNull(this.tableATProject.VicePresidentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetVicePresidentNull() {
                this[this.tableATProject.VicePresidentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsFinancialAnalystNull() {
                return this.IsNull(this.tableATProject.FinancialAnalystColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetFinancialAnalystNull() {
                this[this.tableATProject.FinancialAnalystColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCapitalProjectAssistantNull() {
                return this.IsNull(this.tableATProject.CapitalProjectAssistantColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCapitalProjectAssistantNull() {
                this[this.tableATProject.CapitalProjectAssistantColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsOrganizationIDNull() {
                return this.IsNull(this.tableATProject.OrganizationIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetOrganizationIDNull() {
                this[this.tableATProject.OrganizationIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class ATTrendRowChangeEvent : global::System.EventArgs {
            
            private ATTrendRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ATTrendRowChangeEvent(ATTrendRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ATTrendRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class ATProjectRowChangeEvent : global::System.EventArgs {
            
            private ATProjectRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ATProjectRowChangeEvent(ATProjectRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ATProjectRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace WebAPI.Reports.AllTrendDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ATTrendTableAdapter : global::System.ComponentModel.Component {
        
        private global::Devart.Data.MySql.MySqlDataAdapter _adapter;
        
        private global::Devart.Data.MySql.MySqlConnection _connection;
        
        private global::System.Data.Common.DbTransaction _transaction;
        
        private global::Devart.Data.MySql.MySqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public ATTrendTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::Devart.Data.MySql.MySqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::Devart.Data.MySql.MySqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::Devart.Data.MySql.MySqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.Common.DbTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::Devart.Data.MySql.MySqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::Devart.Data.MySql.MySqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ATTrend";
            tableMapping.ColumnMappings.Add("CategoryID", "CategoryID");
            tableMapping.ColumnMappings.Add("TrendNumber", "TrendNumber");
            tableMapping.ColumnMappings.Add("SubCategoryDescription", "SubCategoryDescription");
            tableMapping.ColumnMappings.Add("ProjectID", "ProjectID");
            tableMapping.ColumnMappings.Add("SubCategoryID", "SubCategoryID");
            tableMapping.ColumnMappings.Add("total", "total");
            tableMapping.ColumnMappings.Add("TrendStatus", "TrendStatus");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::Devart.Data.MySql.MySqlConnection();
            this._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings["cppConnectionString"].ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::Devart.Data.MySql.MySqlCommand[1];
            this._commandCollection[0] = new global::Devart.Data.MySql.MySqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "cpp.report_alltrend";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            global::Devart.Data.MySql.MySqlParameter param = new global::Devart.Data.MySql.MySqlParameter();
            param.ParameterName = "projectid";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlType = global::Devart.Data.MySql.MySqlType.Int;
            param.Size = 2147483647;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[0].Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(AllTrendDataSet.ATTrendDataTable dataTable, global::System.Nullable<int> projectid) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((projectid.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((int)(projectid.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual AllTrendDataSet.ATTrendDataTable GetData(global::System.Nullable<int> projectid) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((projectid.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((int)(projectid.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            AllTrendDataSet.ATTrendDataTable dataTable = new AllTrendDataSet.ATTrendDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ATProjectTableAdapter : global::System.ComponentModel.Component {
        
        private global::Devart.Data.MySql.MySqlDataAdapter _adapter;
        
        private global::Devart.Data.MySql.MySqlConnection _connection;
        
        private global::System.Data.Common.DbTransaction _transaction;
        
        private global::Devart.Data.MySql.MySqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public ATProjectTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::Devart.Data.MySql.MySqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::Devart.Data.MySql.MySqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::Devart.Data.MySql.MySqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.Common.DbTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::Devart.Data.MySql.MySqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::Devart.Data.MySql.MySqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ATProject";
            tableMapping.ColumnMappings.Add("ProjectID", "ProjectID");
            tableMapping.ColumnMappings.Add("ProjectName", "ProjectName");
            tableMapping.ColumnMappings.Add("ProgramID", "ProgramID");
            tableMapping.ColumnMappings.Add("ProgramElementID", "ProgramElementID");
            tableMapping.ColumnMappings.Add("ProjectManager", "ProjectManager");
            tableMapping.ColumnMappings.Add("ProjectSponsor", "ProjectSponsor");
            tableMapping.ColumnMappings.Add("ApprovedTrendNumber", "ApprovedTrendNumber");
            tableMapping.ColumnMappings.Add("CurrentCost", "CurrentCost");
            tableMapping.ColumnMappings.Add("ForecastCost", "ForecastCost");
            tableMapping.ColumnMappings.Add("CurrentStartDate", "CurrentStartDate");
            tableMapping.ColumnMappings.Add("CurrentEndDate", "CurrentEndDate");
            tableMapping.ColumnMappings.Add("ForecastStartDate", "ForecastStartDate");
            tableMapping.ColumnMappings.Add("ForecastEndDate", "ForecastEndDate");
            tableMapping.ColumnMappings.Add("LatLong", "LatLong");
            tableMapping.ColumnMappings.Add("Director", "Director");
            tableMapping.ColumnMappings.Add("Scheduler", "Scheduler");
            tableMapping.ColumnMappings.Add("ExecSteeringComm", "ExecSteeringComm");
            tableMapping.ColumnMappings.Add("VicePresident", "VicePresident");
            tableMapping.ColumnMappings.Add("FinancialAnalyst", "FinancialAnalyst");
            tableMapping.ColumnMappings.Add("CapitalProjectAssistant", "CapitalProjectAssistant");
            tableMapping.ColumnMappings.Add("OrganizationID", "OrganizationID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::Devart.Data.MySql.MySqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM `cpp`.`project` WHERE ((`ProjectID` = :Original_ProjectID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::Devart.Data.MySql.MySqlParameter param = new global::Devart.Data.MySql.MySqlParameter();
            param.ParameterName = "Original_ProjectID";
            param.DbType = global::System.Data.DbType.Int64;
            param.MySqlType = global::Devart.Data.MySql.MySqlType.BigInt;
            param.IsNullable = true;
            param.SourceColumn = "ProjectID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::Devart.Data.MySql.MySqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO `cpp`.`project` (`ProjectName`, `ProgramID`, `ProgramElementID`, `ProjectManager`, `ProjectSponsor`, `ApprovedTrendNumber`, `CurrentCost`, `ForecastCost`, `CurrentStartDate`, `CurrentEndDate`, `ForecastStartDate`, `ForecastEndDate`, `LatLong`, `Director`, `Scheduler`, `ExecSteeringComm`, `VicePresident`, `FinancialAnalyst`, `CapitalProjectAssistant`, `OrganizationID`) VALUES (:ProjectName, :ProgramID, :ProgramElementID, :ProjectManager, :ProjectSponsor, :ApprovedTrendNumber, :CurrentCost, :ForecastCost, :CurrentStartDate, :CurrentEndDate, :ForecastStartDate, :ForecastEndDate, :LatLong, :Director, :Scheduler, :ExecSteeringComm, :VicePresident, :FinancialAnalyst, :CapitalProjectAssistant, :OrganizationID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.MySql.MySqlParameter();
            param.ParameterName = "ProjectName";
            param.MySqlType = global::Devart.Data.MySql.MySqlType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "ProjectName";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.MySql.MySqlParameter();
            param.ParameterName = "ProgramID";
            param.DbType = global::System.Data.DbType.Int64;
            param.MySqlType = global::Devart.Data.MySql.MySqlType.BigInt;
            param.IsNullable = true;
            param.SourceColumn = "ProgramID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.MySql.MySqlParameter();
            param.ParameterName = "ProgramElementID";
            param.DbType = global::System.Data.DbType.Int64;
            param.MySqlType = global::Devart.Data.MySql.MySqlType.BigInt;
            param.IsNullable = true;
            param.SourceColumn = "ProgramElementID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.MySql.MySqlParameter();
            param.ParameterName = "ProjectManager";
            param.MySqlType = global::Devart.Data.MySql.MySqlType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "ProjectManager";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.MySql.MySqlParameter();
            param.ParameterName = "ProjectSponsor";
            param.MySqlType = global::Devart.Data.MySql.MySqlType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "ProjectSponsor";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.MySql.MySqlParameter();
            param.ParameterName = "ApprovedTrendNumber";
            param.MySqlType = global::Devart.Data.MySql.MySqlType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "ApprovedTrendNumber";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.MySql.MySqlParameter();
            param.ParameterName = "CurrentCost";
            param.MySqlType = global::Devart.Data.MySql.MySqlType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "CurrentCost";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.MySql.MySqlParameter();
            param.ParameterName = "ForecastCost";
            param.MySqlType = global::Devart.Data.MySql.MySqlType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "ForecastCost";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.MySql.MySqlParameter();
            param.ParameterName = "CurrentStartDate";
            param.DbType = global::System.Data.DbType.Date;
            param.MySqlType = global::Devart.Data.MySql.MySqlType.Date;
            param.IsNullable = true;
            param.SourceColumn = "CurrentStartDate";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.MySql.MySqlParameter();
            param.ParameterName = "CurrentEndDate";
            param.DbType = global::System.Data.DbType.Date;
            param.MySqlType = global::Devart.Data.MySql.MySqlType.Date;
            param.IsNullable = true;
            param.SourceColumn = "CurrentEndDate";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.MySql.MySqlParameter();
            param.ParameterName = "ForecastStartDate";
            param.DbType = global::System.Data.DbType.Date;
            param.MySqlType = global::Devart.Data.MySql.MySqlType.Date;
            param.IsNullable = true;
            param.SourceColumn = "ForecastStartDate";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.MySql.MySqlParameter();
            param.ParameterName = "ForecastEndDate";
            param.DbType = global::System.Data.DbType.Date;
            param.MySqlType = global::Devart.Data.MySql.MySqlType.Date;
            param.IsNullable = true;
            param.SourceColumn = "ForecastEndDate";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.MySql.MySqlParameter();
            param.ParameterName = "LatLong";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlType = global::Devart.Data.MySql.MySqlType.Text;
            param.IsNullable = true;
            param.SourceColumn = "LatLong";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.MySql.MySqlParameter();
            param.ParameterName = "Director";
            param.MySqlType = global::Devart.Data.MySql.MySqlType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "Director";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.MySql.MySqlParameter();
            param.ParameterName = "Scheduler";
            param.MySqlType = global::Devart.Data.MySql.MySqlType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "Scheduler";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.MySql.MySqlParameter();
            param.ParameterName = "ExecSteeringComm";
            param.MySqlType = global::Devart.Data.MySql.MySqlType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "ExecSteeringComm";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.MySql.MySqlParameter();
            param.ParameterName = "VicePresident";
            param.MySqlType = global::Devart.Data.MySql.MySqlType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "VicePresident";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.MySql.MySqlParameter();
            param.ParameterName = "FinancialAnalyst";
            param.MySqlType = global::Devart.Data.MySql.MySqlType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "FinancialAnalyst";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.MySql.MySqlParameter();
            param.ParameterName = "CapitalProjectAssistant";
            param.MySqlType = global::Devart.Data.MySql.MySqlType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "CapitalProjectAssistant";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.MySql.MySqlParameter();
            param.ParameterName = "OrganizationID";
            param.MySqlType = global::Devart.Data.MySql.MySqlType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "OrganizationID";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::Devart.Data.MySql.MySqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE `cpp`.`project` SET `ProjectName` = :ProjectName, `ProgramID` = :ProgramID, `ProgramElementID` = :ProgramElementID, `ProjectManager` = :ProjectManager, `ProjectSponsor` = :ProjectSponsor, `ApprovedTrendNumber` = :ApprovedTrendNumber, `CurrentCost` = :CurrentCost, `ForecastCost` = :ForecastCost, `CurrentStartDate` = :CurrentStartDate, `CurrentEndDate` = :CurrentEndDate, `ForecastStartDate` = :ForecastStartDate, `ForecastEndDate` = :ForecastEndDate, `LatLong` = :LatLong, `Director` = :Director, `Scheduler` = :Scheduler, `ExecSteeringComm` = :ExecSteeringComm, `VicePresident` = :VicePresident, `FinancialAnalyst` = :FinancialAnalyst, `CapitalProjectAssistant` = :CapitalProjectAssistant, `OrganizationID` = :OrganizationID WHERE ((`ProjectID` = :Original_ProjectID))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.MySql.MySqlParameter();
            param.ParameterName = "ProjectName";
            param.MySqlType = global::Devart.Data.MySql.MySqlType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "ProjectName";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.MySql.MySqlParameter();
            param.ParameterName = "ProgramID";
            param.DbType = global::System.Data.DbType.Int64;
            param.MySqlType = global::Devart.Data.MySql.MySqlType.BigInt;
            param.IsNullable = true;
            param.SourceColumn = "ProgramID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.MySql.MySqlParameter();
            param.ParameterName = "ProgramElementID";
            param.DbType = global::System.Data.DbType.Int64;
            param.MySqlType = global::Devart.Data.MySql.MySqlType.BigInt;
            param.IsNullable = true;
            param.SourceColumn = "ProgramElementID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.MySql.MySqlParameter();
            param.ParameterName = "ProjectManager";
            param.MySqlType = global::Devart.Data.MySql.MySqlType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "ProjectManager";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.MySql.MySqlParameter();
            param.ParameterName = "ProjectSponsor";
            param.MySqlType = global::Devart.Data.MySql.MySqlType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "ProjectSponsor";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.MySql.MySqlParameter();
            param.ParameterName = "ApprovedTrendNumber";
            param.MySqlType = global::Devart.Data.MySql.MySqlType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "ApprovedTrendNumber";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.MySql.MySqlParameter();
            param.ParameterName = "CurrentCost";
            param.MySqlType = global::Devart.Data.MySql.MySqlType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "CurrentCost";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.MySql.MySqlParameter();
            param.ParameterName = "ForecastCost";
            param.MySqlType = global::Devart.Data.MySql.MySqlType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "ForecastCost";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.MySql.MySqlParameter();
            param.ParameterName = "CurrentStartDate";
            param.DbType = global::System.Data.DbType.Date;
            param.MySqlType = global::Devart.Data.MySql.MySqlType.Date;
            param.IsNullable = true;
            param.SourceColumn = "CurrentStartDate";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.MySql.MySqlParameter();
            param.ParameterName = "CurrentEndDate";
            param.DbType = global::System.Data.DbType.Date;
            param.MySqlType = global::Devart.Data.MySql.MySqlType.Date;
            param.IsNullable = true;
            param.SourceColumn = "CurrentEndDate";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.MySql.MySqlParameter();
            param.ParameterName = "ForecastStartDate";
            param.DbType = global::System.Data.DbType.Date;
            param.MySqlType = global::Devart.Data.MySql.MySqlType.Date;
            param.IsNullable = true;
            param.SourceColumn = "ForecastStartDate";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.MySql.MySqlParameter();
            param.ParameterName = "ForecastEndDate";
            param.DbType = global::System.Data.DbType.Date;
            param.MySqlType = global::Devart.Data.MySql.MySqlType.Date;
            param.IsNullable = true;
            param.SourceColumn = "ForecastEndDate";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.MySql.MySqlParameter();
            param.ParameterName = "LatLong";
            param.DbType = global::System.Data.DbType.String;
            param.MySqlType = global::Devart.Data.MySql.MySqlType.Text;
            param.IsNullable = true;
            param.SourceColumn = "LatLong";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.MySql.MySqlParameter();
            param.ParameterName = "Director";
            param.MySqlType = global::Devart.Data.MySql.MySqlType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "Director";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.MySql.MySqlParameter();
            param.ParameterName = "Scheduler";
            param.MySqlType = global::Devart.Data.MySql.MySqlType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "Scheduler";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.MySql.MySqlParameter();
            param.ParameterName = "ExecSteeringComm";
            param.MySqlType = global::Devart.Data.MySql.MySqlType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "ExecSteeringComm";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.MySql.MySqlParameter();
            param.ParameterName = "VicePresident";
            param.MySqlType = global::Devart.Data.MySql.MySqlType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "VicePresident";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.MySql.MySqlParameter();
            param.ParameterName = "FinancialAnalyst";
            param.MySqlType = global::Devart.Data.MySql.MySqlType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "FinancialAnalyst";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.MySql.MySqlParameter();
            param.ParameterName = "CapitalProjectAssistant";
            param.MySqlType = global::Devart.Data.MySql.MySqlType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "CapitalProjectAssistant";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.MySql.MySqlParameter();
            param.ParameterName = "OrganizationID";
            param.MySqlType = global::Devart.Data.MySql.MySqlType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "OrganizationID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.MySql.MySqlParameter();
            param.ParameterName = "Original_ProjectID";
            param.DbType = global::System.Data.DbType.Int64;
            param.MySqlType = global::Devart.Data.MySql.MySqlType.BigInt;
            param.IsNullable = true;
            param.SourceColumn = "ProjectID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::Devart.Data.MySql.MySqlConnection();
            this._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings["cppConnectionString"].ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::Devart.Data.MySql.MySqlCommand[1];
            this._commandCollection[0] = new global::Devart.Data.MySql.MySqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT * FROM project WHERE ProjectID = :ProjectID";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            global::Devart.Data.MySql.MySqlParameter param = new global::Devart.Data.MySql.MySqlParameter();
            param.ParameterName = "ProjectID";
            param.DbType = global::System.Data.DbType.Int64;
            param.MySqlType = global::Devart.Data.MySql.MySqlType.BigInt;
            param.IsNullable = true;
            param.SourceColumn = "ProjectID";
            this._commandCollection[0].Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(AllTrendDataSet.ATProjectDataTable dataTable, long ProjectID) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((long)(ProjectID));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual AllTrendDataSet.ATProjectDataTable GetData(long ProjectID) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((long)(ProjectID));
            AllTrendDataSet.ATProjectDataTable dataTable = new AllTrendDataSet.ATProjectDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(AllTrendDataSet.ATProjectDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(AllTrendDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ATProject");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private ATProjectTableAdapter _aTProjectTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public ATProjectTableAdapter ATProjectTableAdapter {
            get {
                return this._aTProjectTableAdapter;
            }
            set {
                this._aTProjectTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._aTProjectTableAdapter != null) 
                            && (this._aTProjectTableAdapter.Connection != null))) {
                    return this._aTProjectTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._aTProjectTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateUpdatedRows(AllTrendDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._aTProjectTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.ATProject.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._aTProjectTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateInsertedRows(AllTrendDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._aTProjectTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.ATProject.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._aTProjectTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateDeletedRows(AllTrendDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._aTProjectTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.ATProject.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._aTProjectTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual int UpdateAll(AllTrendDataSet dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._aTProjectTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._aTProjectTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._aTProjectTableAdapter != null)) {
                    revertConnections.Add(this._aTProjectTableAdapter, this._aTProjectTableAdapter.Connection);
                    this._aTProjectTableAdapter.Connection = ((global::Devart.Data.MySql.MySqlConnection)(workConnection));
                    this._aTProjectTableAdapter.Transaction = ((global::System.Data.Common.DbTransaction)(workTransaction));
                    if (this._aTProjectTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._aTProjectTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._aTProjectTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._aTProjectTableAdapter != null)) {
                    this._aTProjectTableAdapter.Connection = ((global::Devart.Data.MySql.MySqlConnection)(revertConnections[this._aTProjectTableAdapter]));
                    this._aTProjectTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private global::System.Data.DataRow GetRoot(global::System.Data.DataRow row, out int distance) {
                global::System.Diagnostics.Debug.Assert((row != null));
                global::System.Data.DataRow root = row;
                distance = 0;

                global::System.Collections.Generic.IDictionary<global::System.Data.DataRow, global::System.Data.DataRow> traversedRows = new global::System.Collections.Generic.Dictionary<global::System.Data.DataRow, global::System.Data.DataRow>();
                traversedRows[row] = row;

                global::System.Data.DataRow parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((parent != null) 
                            && (traversedRows.ContainsKey(parent) == false)); 
                ) {
                    distance = (distance + 1);
                    root = parent;
                    traversedRows[parent] = parent;
                    parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }

                if ((distance == 0)) {
                    traversedRows.Clear();
                    traversedRows[row] = row;
                    parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    for (
                    ; ((parent != null) 
                                && (traversedRows.ContainsKey(parent) == false)); 
                    ) {
                        distance = (distance + 1);
                        root = parent;
                        traversedRows[parent] = parent;
                        parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }

                return root;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                int distance1 = 0;
                global::System.Data.DataRow root1 = this.GetRoot(row1, out distance1);

                int distance2 = 0;
                global::System.Data.DataRow root2 = this.GetRoot(row2, out distance2);

                if (object.ReferenceEquals(root1, root2)) {
                    return (this._childFirst * distance1.CompareTo(distance2));
                }
                else {
                    global::System.Diagnostics.Debug.Assert(((root1.Table != null) 
                                    && (root2.Table != null)));
                    if ((root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2))) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
            }
        }
    }
}

#pragma warning restore 1591